{"version":3,"sources":["blocks/Users/Users.tsx","blocks/Routing/RouterContext.ts","blocks/Routing/Route.tsx","blocks/Routing/Router.tsx","blocks/Welcome/Welcome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ViewType","RouterContext","React","createContext","RouterProvider","Provider","RouterConsumer","Consumer","Route","_this$props","this","props","showWhenEmpty","path","block","react_default","a","createElement","hash","Component","Router","_this","getHash","window","location","replace","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hashListener","state","setState","value","children","addEventListener","removeEventListener","Users","handleClick","clickedType","viewType","Tile","className","Users_Search","Users_Switcher","onClick","Users_UsersLayout","UsersLayout","data","i","push","Table","map","val","Users_Line","key","valueObject","isUnmanaged","Group","Users_Group","Users_Tile","Line","classes","Search","type","placeholder","Switcher","getClassName","isActive","concat","Welcome","App","href","Routing_Router","Routing_Route","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9596270.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Users.scss';\r\n\r\nexport enum ViewType { Default= 0, Group= 1, Tile= 2, Table= 3 }\r\n\r\nexport interface IUsersProps {\r\n  viewType: ViewType;\r\n}\r\n\r\nexport interface IUsersState {\r\n  viewType: ViewType;\r\n}\r\n\r\nclass Users extends Component<IUsersProps, IUsersState> {\r\n  constructor(props: IUsersProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      viewType: ViewType.Tile\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"users-container\">\r\n        <div className=\"users-container__header-panel\">\r\n          <Search/>\r\n          <Switcher viewType={this.state.viewType} onClick={this.handleClick}/>\r\n        </div>\r\n        <UsersLayout viewType={this.state.viewType}/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleClick = (clickedType: ViewType): void => {\r\n    this.setState({\r\n      viewType: clickedType\r\n    });\r\n  }\r\n}\r\n\r\nconst UsersLayout = (props: { viewType: ViewType }): JSX.Element => {\r\n\r\n  const data: number[] = [];\r\n  for (let i = 1; i < 5; i++) {\r\n    data.push(i);\r\n  }\r\n\r\n  switch (props.viewType) {\r\n\r\n    case ViewType.Table:\r\n      return (\r\n        <div className=\"users-container__content-panel users-table\">\r\n          {data.map((val: number) => <Line key={val} valueObject={val} isUnmanaged={val === 5 || val === 6}/>)}\r\n        </div>);\r\n\r\n    case ViewType.Group:\r\n        return (\r\n          <div className=\"users-container__content-panel\">\r\n            <ul className=\"user-groups\">\r\n              {data.map((val: number) => <Group key={val} valueObject={val}/>)}\r\n            </ul>\r\n          </div>);\r\n\r\n    case ViewType.Tile:\r\n    default:\r\n        return (\r\n          <div className=\"users-container__content-panel\">\r\n            <ul className=\"user-tiles\">\r\n              {data.map((val: number) => <Tile key={val} valueObject={val}/>)}\r\n            </ul>\r\n          </div>);\r\n  }\r\n};\r\n\r\nconst Group = (props: { valueObject: number }): JSX.Element => {\r\n  return <li className=\"user-groups__group\">{props.valueObject}</li>;\r\n};\r\n\r\nconst Tile = (props: { valueObject: number }): JSX.Element => {\r\n  return <li className=\"user-tiles__tile\">{props.valueObject}</li>;\r\n};\r\n\r\nconst Line = (props: { valueObject: number, isUnmanaged: boolean}): JSX.Element => {\r\n  const classes = \r\n        \"users-table__cell \" \r\n         + (props.isUnmanaged ? \"users-table__cell_unmanaged\" : \"\");\r\n  const line = <div className={classes}>{props.valueObject}</div>;\r\n  return line;\r\n};\r\n\r\nconst Search = (): JSX.Element => {\r\n  return (\r\n      <div className=\"search\">\r\n        <label className=\"search__label\">Search:</label>\r\n        <input className=\"search__input\" type=\"search\" placeholder=\"text\" />\r\n      </div>);\r\n};\r\n\r\nconst Switcher = (props: { viewType: ViewType, onClick: any }): JSX.Element => {\r\n  return (\r\n    <div className=\"switcher\">\r\n      <div \r\n        className={getClassName(\"group\", props.viewType === ViewType.Group)} \r\n        onClick={() => props.onClick(ViewType.Group)}\r\n      />\r\n      <div \r\n        className={getClassName(\"tile\", props.viewType === ViewType.Tile)} \r\n        onClick={() => props.onClick(ViewType.Tile)}\r\n      />\r\n      <div \r\n        className={getClassName(\"table\", props.viewType === ViewType.Table)} \r\n        onClick={() => props.onClick(ViewType.Table)}\r\n      />\r\n    </div>);\r\n\r\n  function getClassName(type: string, isActive: boolean): string {\r\n    return `switcher__button switcher__button_type_${type} ${isActive ? \"switcher__button_active\" : \"\"}`;\r\n  }\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\n\r\nconst RouterContext = React.createContext({});\r\n\r\nexport const RouterProvider: any = RouterContext.Provider;\r\nexport const RouterConsumer: any = RouterContext.Consumer;\r\n","import React, { Component } from 'react';\r\nimport { RouterConsumer } from './RouterContext';\r\n\r\ninterface IRouteProps {\r\n    path: string;\r\n    showWhenEmpty?: boolean;\r\n    block: typeof React.Component;\r\n}\r\n\r\nclass Route extends Component<IRouteProps> {\r\n\r\n    public render(): JSX.Element | null {\r\n\r\n        const { showWhenEmpty, path, block } = this.props;\r\n\r\n        return (\r\n            <RouterConsumer>\r\n                {(hash: string) => (showWhenEmpty && hash === '' || hash === path) ? React.createElement(block) : null} \r\n            </RouterConsumer>);\r\n\r\n    }\r\n}\r\n\r\nexport default Route;\r\n","import React, { Component } from 'react';\r\nimport { RouterProvider } from './RouterContext';\r\n\r\nclass Router extends Component<any, { hash: string }> {\r\n\r\n    private hashListener: EventListener;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hash: getHash(),\r\n        };\r\n\r\n        this.hashListener = () => {\r\n            this.setState({ hash : getHash() });\r\n        };\r\n\r\n        function getHash() {\r\n            return window.location.hash.replace('#', '');\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return <RouterProvider value={this.state.hash}>{this.props.children}</RouterProvider>;\r\n    }\r\n\r\n    public componentDidMount() {\r\n        window.addEventListener(\"hashchange\", this.hashListener);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        window.removeEventListener(\"hashchange\", this.hashListener);\r\n    }\r\n}\r\n\r\nexport default Router;\r\n","import React, { Component } from 'react';\r\n\r\ninterface IWelcomeProps {}\r\n\r\nclass Welcome extends Component<IWelcomeProps> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>Welcome</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Welcome;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Route from './blocks/Routing/Route';\nimport Router from './blocks/Routing/Router';\nimport Users from './blocks/Users/Users';\nimport Welcome from './blocks/Welcome/Welcome';\n\nclass App extends Component {\n  public render(): JSX.Element {\n    return (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <div className=\"app__link-container\">\n            <a className=\"app__link\" href=\"#welcome\">Welcome</a>\n            <a className=\"app__link\" href=\"#users\">Users</a>\n          </div>\n        </header>\n        <Router>\n          <Route path=\"welcome\" showWhenEmpty={true} block={Welcome}/>\n          <Route path=\"users\" block={Users}/>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'core-js/es6/symbol';\nimport 'core-js/es6/object';\nimport 'core-js/es6/function';\nimport 'core-js/es6/parse-int';\nimport 'core-js/es6/parse-float';\nimport 'core-js/es6/number';\nimport 'core-js/es6/math';\nimport 'core-js/es6/string';\nimport 'core-js/es6/date';\nimport 'core-js/es6/array';\nimport 'core-js/es6/regexp';\nimport 'core-js/es6/map';\nimport 'core-js/es6/weak-map';\nimport 'core-js/es6/set';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}